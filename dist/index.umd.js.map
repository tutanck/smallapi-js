{"version":3,"file":"index.umd.js","sources":["../src/values/constants.ts","../src/utils/axios.ts","../src/client/index.ts","../src/client/connect.ts","../src/utils/conf.ts","../src/client/api-client.ts","../src/client/api-functions.ts","../src/client/nomenclature.ts","../src/client/functions.ts"],"sourcesContent":["export const API_BASE_URI = '/api';\nexport const CONF_ROUTE_URI = '/conf';\nexport const CONF_ROUTE_METHOD = 'GET';\n","import axios from 'axios';\n\nconst axiosInstance = axios.create();\n\nconst wrap = (promise) => {\n  return promise\n    .then((res) => {\n      return res.data;\n    })\n    .catch((err) => {\n      throw err;\n    });\n};\n\nexport const get = (url, options) => {\n  return wrap(\n    axiosInstance({\n      method: 'get',\n      url,\n      ...options,\n    }),\n  );\n};\n\nexport const post = (url, options) => {\n  return wrap(\n    axiosInstance({\n      method: 'post',\n      url,\n      ...options,\n    }),\n  );\n};\n\nexport const put = (url, options) => {\n  return wrap(\n    axiosInstance({\n      method: 'put',\n      url,\n      ...options,\n    }),\n  );\n};\n\nexport const del = (url, options) => {\n  return wrap(\n    axiosInstance({\n      method: 'delete',\n      url,\n      ...options,\n    }),\n  );\n};\n","import connect from './connect';\nimport getApiClient from './api-client';\nimport getApiFunctions, { Api } from './api-functions';\n\nexport type Config = {\n  apiKey: string | null | undefined;\n  decodeKey: string | null | undefined;\n  debug: boolean | undefined;\n};\n\nasync function api(\n  serverUrl: string,\n  { apiKey = null, decodeKey = null, debug = false }: Config,\n): Promise<Api> {\n  if (!serverUrl) {\n    throw new Error(\"'serverUrl' cannot be undefined or null.\");\n  }\n\n  if (debug === true) console.log({ serverUrl, apiKey, decodeKey, debug });\n\n  const serverConfig = await connect(serverUrl, {\n    debug,\n  });\n\n  const { descriptor, serverRootUrl, apiBaseUri } = serverConfig;\n\n  const apiClient = getApiClient({\n    serverRootUrl,\n    apiBaseUri,\n    decodeKey,\n    apiKey,\n  });\n\n  const { get, post, put, del } = apiClient;\n\n  const apiFunctions = getApiFunctions(\n    descriptor,\n    { get, post, put, del },\n    { debug },\n  );\n\n  if (debug === true) {\n    Object.entries(apiFunctions).map(([fnName, fn]) => {\n      console.log(`${fnName}: ${fn.toString()}`);\n    });\n  }\n\n  return apiFunctions;\n}\n\nexport { api };\n\nexport default api;\n","import _ from 'lodash';\nimport isArray from 'isarray';\nimport parseUrl from 'url-parse';\nimport slashes from 'remove-trailing-slash';\nimport { API_BASE_URI, CONF_ROUTE_URI } from '../values/constants';\nimport { hasConf } from '../utils/conf';\nimport { get } from '../utils/axios';\n\nexport default async function connect(serverUrl, { debug = false }) {\n  if (debug === true) console.log('-> fetching', serverUrl);\n\n  return await get(serverUrl, {})\n    .then(async (indexMap) => {\n      let descriptor;\n\n      if (hasConf(indexMap)) {\n        try {\n          const confUrl = `${slashes(serverUrl)}${CONF_ROUTE_URI}`;\n\n          if (debug === true) console.log('-> fetching', confUrl);\n\n          const conf = await get(confUrl, {});\n\n          const { routing } = conf;\n\n          const apiMap = routing[API_BASE_URI];\n\n          if (!(isArray(apiMap) && apiMap.length > 0)) {\n            throw new Error('Invalid or empty api-map');\n          }\n\n          descriptor = _.groupBy(apiMap, 'name');\n        } catch (error) {\n          console.error(error);\n\n          throw new Error(`Api conf unreachable on server '${serverUrl}'`);\n        }\n      } else throw new Error(`Api conf not found on server '${serverUrl}'`);\n\n      const { protocol, host } = parseUrl(serverUrl);\n\n      const serverRootUrl = `${protocol}//${host}`;\n\n      const serverConfig = {\n        descriptor,\n        serverRootUrl,\n        apiBaseUri: API_BASE_URI,\n      };\n\n      return serverConfig;\n    })\n    .catch((error) => {\n      console.error(error);\n\n      throw new Error(`Unable to connect to server '${serverUrl}'`);\n    });\n}\n","import { CONF_ROUTE_METHOD, CONF_ROUTE_URI } from '../values/constants';\n\nexport function hasConf(indexMap = []) {\n  const confRoute = indexMap.find((route) => route?.path === CONF_ROUTE_URI);\n\n  const isConfCallable = Boolean(\n    confRoute?.methods?.includes(CONF_ROUTE_METHOD),\n  );\n\n  return isConfCallable;\n}\n","import {\n  makeGet,\n  makePost,\n  makePut,\n  makeDel,\n  createInstance,\n} from '@tutanck/axios';\nimport slashes from 'remove-trailing-slash';\n\nfunction getApiClient({ serverRootUrl, apiBaseUri, apiKey, decodeKey }) {\n  const baseURL = [slashes(serverRootUrl), apiBaseUri].join('');\n\n  const instance = createInstance({\n    baseURL,\n    headers: {\n      authorization: apiKey,\n    },\n  });\n\n  const get = makeGet(instance, {\n    encryption: { decodeKey },\n  });\n\n  const post = makePost(instance, {\n    encryption: { decodeKey },\n  });\n\n  const put = makePut(instance, {\n    encryption: { decodeKey },\n  });\n\n  const del = makeDel(instance, {\n    encryption: { decodeKey },\n  });\n\n  const apiClient = { get, post, put, del };\n\n  return apiClient;\n}\n\nexport { getApiClient };\n\nexport default getApiClient;\n","import getFunction from './functions';\nimport getNaming from './nomenclature';\n\nexport type Api = { [key: string]: Function };\n\nfunction getApiFunctions(\n  descriptor,\n  { get, post, put, del },\n  { debug = false },\n): Api {\n  const apiFunctions = Object.entries(descriptor).reduce(\n    (\n      acc,\n      [key, value]: [string, Array<{ uri: any; name: any; verb: any }>],\n    ) => {\n      const fnName = getNaming(key);\n\n      const [description] = value;\n\n      const fn = getFunction(\n        description,\n        { get, post, put, del },\n        { debug, fnName },\n      );\n\n      const cc = {\n        ...acc,\n        [fnName]: fn,\n      };\n\n      return cc;\n    },\n    {},\n  );\n\n  return apiFunctions;\n}\n\nexport { getApiFunctions };\n\nexport default getApiFunctions;\n","function getNaming(rawName) {\n  const Routine = 'Routine';\n  if (rawName.endsWith(Routine)) {\n    const radixLength = rawName.length - Routine.length;\n\n    const radix = rawName.substring(0, radixLength);\n\n    const count = 'count';\n    if (rawName.startsWith(count)) {\n      const modelName = radix.substring(count.length, rawName.length);\n\n      const fnName = `count${modelName}`;\n      return fnName;\n    }\n\n    const create = 'create';\n    if (rawName.startsWith(create)) {\n      const modelName = radix.substring(create.length, rawName.length);\n\n      const fnName = `create${modelName}`;\n      return fnName;\n    }\n\n    const findById = 'findById';\n    if (rawName.startsWith(findById)) {\n      const modelName = radix.substring(findById.length, rawName.length);\n\n      const fnName = `find${modelName}ById`;\n      return fnName;\n    }\n\n    const findByQuery = 'findByQuery';\n    if (rawName.startsWith(findByQuery)) {\n      const modelName = radix.substring(findByQuery.length, rawName.length);\n\n      const fnName = `find${modelName}ByQuery`;\n      return fnName;\n    }\n\n    const removeById = 'removeById';\n    if (rawName.startsWith(removeById)) {\n      const modelName = radix.substring(removeById.length, rawName.length);\n\n      const fnName = `remove${modelName}ByQuery`;\n      return fnName;\n    }\n\n    const removeByQuery = 'removeByQuery';\n    if (rawName.startsWith(removeByQuery)) {\n      const modelName = radix.substring(removeByQuery.length, rawName.length);\n\n      const fnName = `remove${modelName}ByQuery`;\n      return fnName;\n    }\n\n    const updateById = 'updateById';\n    if (rawName.startsWith(updateById)) {\n      const modelName = radix.substring(updateById.length, rawName.length);\n\n      const fnName = `update${modelName}ById`;\n      return fnName;\n    }\n\n    const updateByQuery = 'updateByQuery';\n    if (rawName.startsWith(updateByQuery)) {\n      const modelName = radix.substring(updateByQuery.length, rawName.length);\n\n      const fnName = `update${modelName}ByQuery`;\n      return fnName;\n    }\n  }\n\n  return rawName;\n}\n\nexport { getNaming };\n\nexport default getNaming;\n","import qs from 'qs';\n\nfunction getFunction(\n  { uri, name, verb },\n  { get, post, put, del },\n  { debug = false, fnName },\n) {\n  const call = {\n    PUT: put,\n    GET: get,\n    POST: post,\n    DELETE: del,\n  }[verb];\n\n  const Routine = 'Routine';\n  if (name.endsWith(Routine)) {\n    //\n\n    // count\n    const count = 'count';\n    if (name.startsWith(count)) {\n      const fn = async (filter: object): Promise<number> => {\n        const url = `${uri}?${qs.stringify({ filter })}`;\n\n        if (debug === true) {\n          console.log({ fnName, uri, name, verb });\n          console.log(`${verb} '${url}'`);\n        }\n\n        return call(url);\n      };\n\n      return fn;\n    }\n\n    // create\n    const create = 'create';\n    if (name.startsWith(create)) {\n      const fn = async (\n        docs: object | Array<object>,\n        options: object | undefined = {},\n      ): Promise<object | Array<object>> => {\n        const url = `${uri}?${qs.stringify({ options })}`;\n\n        const data = { data: { docs } };\n\n        if (debug === true) {\n          console.log({ fnName, uri, name, verb });\n          console.log(`${verb} '${url}' with data: ${JSON.stringify(data)}`);\n        }\n\n        return call(url, data);\n      };\n\n      return fn;\n    }\n\n    // findById\n    const findById = 'findById';\n    if (name.startsWith(findById)) {\n      const fn = async (\n        id: string,\n        projection: object | string | Array<string> | undefined = {},\n        options: object | undefined = {},\n      ): Promise<object> => {\n        const url = `${uri}${id}?${qs.stringify({ projection, options })}`;\n\n        if (debug === true) {\n          console.log({ fnName, uri, name, verb });\n          console.log(`${verb} '${url}'`);\n        }\n\n        return call(url);\n      };\n\n      return fn;\n    }\n\n    // findByQuery\n    const findByQuery = 'findByQuery';\n    if (name.startsWith(findByQuery)) {\n      const fn = async (\n        filter: object,\n        projection: object | string | Array<string> | undefined = {},\n        options: object | undefined = {},\n      ): Promise<Array<object>> => {\n        const url = `${uri}?${qs.stringify({ filter, projection, options })}`;\n\n        if (debug === true) {\n          console.log({ fnName, uri, name, verb });\n          console.log(`${verb} '${url}'`);\n        }\n\n        return call(url);\n      };\n\n      return fn;\n    }\n\n    // removeById\n    const removeById = 'removeById';\n    if (name.startsWith(removeById)) {\n      const fn = async (\n        id: string,\n        options: object | undefined = {},\n      ): Promise<object> => {\n        const url = `${uri}${id}?${qs.stringify({ options })}`;\n\n        if (debug === true) {\n          console.log({ fnName, uri, name, verb });\n          console.log(`${verb} '${url}'`);\n        }\n\n        return call(url);\n      };\n\n      return fn;\n    }\n\n    // removeByQuery\n    const removeByQuery = 'removeByQuery';\n    if (name.startsWith(removeByQuery)) {\n      const fn = async (\n        filter: object,\n        options: object | undefined = {},\n      ): Promise<any | object> => {\n        const url = `${uri}?${qs.stringify({ filter, options })}`;\n\n        if (debug === true) {\n          console.log({ fnName, uri, name, verb });\n          console.log(`${verb} '${url}'`);\n        }\n\n        return call(url);\n      };\n\n      return fn;\n    }\n\n    // updateById\n    const updateById = 'updateById';\n    if (name.startsWith(updateById)) {\n      const fn = async (\n        id: string,\n        update: object,\n        options: object | undefined = {},\n      ): Promise<object> => {\n        const url = `${uri}${id}?${qs.stringify({ options })}`;\n\n        const data = { data: { update } };\n\n        if (debug === true) {\n          console.log({ fnName, uri, name, verb });\n          console.log(`${verb} '${url}' with data: ${JSON.stringify(data)}`);\n        }\n\n        return call(url, data);\n      };\n\n      return fn;\n    }\n\n    // updateByQuery\n    const updateByQuery = 'updateByQuery';\n    if (name.startsWith(updateByQuery)) {\n      const fn = async (\n        filter: object,\n        update: object,\n        options: object | undefined = {},\n      ): Promise<any | object> => {\n        const url = `${uri}?${qs.stringify({ filter, options })}`;\n\n        const data = { data: { update } };\n\n        if (debug === true) {\n          console.log({ fnName, uri, name, verb });\n          console.log(`${verb} '${url}' with data: ${JSON.stringify(data)}`);\n        }\n\n        return call(url, data);\n      };\n\n      return fn;\n    }\n  }\n\n  // defaultFn\n  const defaultFn = async ({\n    body,\n    query,\n    params,\n  }: {\n    body: any;\n    query: any;\n    params: any;\n  }): Promise<any> => {\n    // TODO remove :params from the uri first to get a raw uri\n\n    const url = `${uri}?${qs.stringify({ query })}`;\n\n    const data = { data: body, params };\n\n    if (debug === true) {\n      console.log({ fnName, uri, name, verb });\n      console.log(`${verb} '${url}' with data: ${JSON.stringify(data)}`);\n    }\n\n    return call(url, data);\n  };\n\n  return defaultFn;\n}\n\nexport { getFunction };\n\nexport default getFunction;\n"],"names":["API_BASE_URI","CONF_ROUTE_URI","axiosInstance","axios","create","get","url","options","_extends","method","then","res","data","err","api","serverUrl","_ref","_ref$apiKey","apiKey","_ref$decodeKey","decodeKey","_ref$debug","debug","Error","console","log","Promise","resolve","indexMap","_temp2","descriptor","_result2","_parseUrl","parseUrl","serverRootUrl","protocol","host","apiBaseUri","_temp","_confRoute$methods","confRoute","find","route","path","Boolean","methods","includes","hasConf","confUrl","slashes","conf","apiMap","routing","isArray","length","_","groupBy","_catch","error","e","reject","connect","serverConfig","apiClient","baseURL","join","instance","createInstance","headers","authorization","makeGet","encryption","post","makePost","put","makePut","del","makeDel","getApiClient","apiFunctions","_ref2","_ref2$debug","Object","entries","reduce","acc","_ref3","_extends2","value","fnName","rawName","endsWith","radix","substring","Routine","startsWith","count","findById","findByQuery","removeById","removeByQuery","modelName","updateById","updateByQuery","getNaming","fn","uri","name","verb","_ref3$debug","call","PUT","GET","POST","DELETE","filter","qs","stringify","docs","JSON","id","projection","update","_ref4","body","query","params","getFunction","getApiFunctions","map","toString"],"mappings":"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"}
{"version":3,"file":"index.modern.mjs","sources":["../src/values/constants.ts","../src/utils/axios.ts","../src/client/connect.ts","../src/utils/conf.ts","../src/client/index.ts","../src/client/api-client.ts","../src/client/api-functions.ts","../src/client/nomenclature.ts","../src/client/functions.ts"],"sourcesContent":["export const API_BASE_URI = '/api';\nexport const CONF_ROUTE_URI = '/conf';\nexport const CONF_ROUTE_METHOD = 'GET';\n","import axios from 'axios';\n\nconst axiosInstance = axios.create();\n\nconst wrap = (promise) => {\n  return promise\n    .then((res) => {\n      return res.data;\n    })\n    .catch((err) => {\n      throw err;\n    });\n};\n\nexport const get = (url, options) => {\n  return wrap(\n    axiosInstance({\n      method: 'get',\n      url,\n      ...options,\n    }),\n  );\n};\n\nexport const post = (url, options) => {\n  return wrap(\n    axiosInstance({\n      method: 'post',\n      url,\n      ...options,\n    }),\n  );\n};\n\nexport const put = (url, options) => {\n  return wrap(\n    axiosInstance({\n      method: 'put',\n      url,\n      ...options,\n    }),\n  );\n};\n\nexport const del = (url, options) => {\n  return wrap(\n    axiosInstance({\n      method: 'delete',\n      url,\n      ...options,\n    }),\n  );\n};\n","import _ from 'lodash';\nimport isArray from 'isarray';\nimport parseUrl from 'url-parse';\nimport slashes from 'remove-trailing-slash';\nimport { API_BASE_URI, CONF_ROUTE_URI } from '../values/constants';\nimport { hasConf } from '../utils/conf';\nimport { get } from '../utils/axios';\n\nexport default async function connect(serverUrl, { debug = false }) {\n  if (debug === true) console.log('-> fetching', serverUrl);\n\n  return await get(serverUrl, {})\n    .then(async (indexMap) => {\n      let descriptor;\n\n      if (hasConf(indexMap)) {\n        try {\n          const confUrl = `${slashes(serverUrl)}${CONF_ROUTE_URI}`;\n\n          if (debug === true) console.log('-> fetching', confUrl);\n\n          const conf = await get(confUrl, {});\n\n          const { routing } = conf;\n\n          const apiMap = routing[API_BASE_URI];\n\n          if (!(isArray(apiMap) && apiMap.length > 0)) {\n            throw new Error('Invalid or empty api-map');\n          }\n\n          descriptor = _.groupBy(apiMap, 'name');\n        } catch (error) {\n          console.error(error);\n\n          throw new Error(`Api conf unreachable on server '${serverUrl}'`);\n        }\n      } else throw new Error(`Api conf not found on server '${serverUrl}'`);\n\n      const { protocol, host } = parseUrl(serverUrl);\n\n      const serverRootUrl = `${protocol}//${host}`;\n\n      const serverConfig = {\n        descriptor,\n        serverRootUrl,\n        apiBaseUri: API_BASE_URI,\n      };\n\n      return serverConfig;\n    })\n    .catch((error) => {\n      console.error(error);\n\n      throw new Error(`Unable to connect to server '${serverUrl}'`);\n    });\n}\n","import { CONF_ROUTE_METHOD, CONF_ROUTE_URI } from '../values/constants';\n\nexport function hasConf(indexMap = []) {\n  const confRoute = indexMap.find((route) => route?.path === CONF_ROUTE_URI);\n\n  const isConfCallable = Boolean(\n    confRoute?.methods?.includes(CONF_ROUTE_METHOD),\n  );\n\n  return isConfCallable;\n}\n","import connect from './connect';\nimport getApiClient from './api-client';\nimport getApiFunctions, { Api } from './api-functions';\n\nexport type Config = {\n  apiKey: string | null | undefined;\n  decodeKey: string | null | undefined;\n  debug: boolean | undefined;\n};\n\nasync function api(\n  serverUrl: string,\n  { apiKey = null, decodeKey = null, debug = false }: Config,\n): Promise<Api> {\n  if (!serverUrl) {\n    throw new Error(\"'serverUrl' cannot be undefined or null.\");\n  }\n\n  if (debug === true) console.log({ serverUrl, apiKey, decodeKey, debug });\n\n  const serverConfig = await connect(serverUrl, {\n    debug,\n  });\n\n  const { descriptor, serverRootUrl, apiBaseUri } = serverConfig;\n\n  const apiClient = getApiClient({\n    serverRootUrl,\n    apiBaseUri,\n    decodeKey,\n    apiKey,\n  });\n\n  const { get, post, put, del } = apiClient;\n\n  const apiFunctions = getApiFunctions(\n    descriptor,\n    { get, post, put, del },\n    { debug },\n  );\n\n  if (debug === true) {\n    Object.entries(apiFunctions).map(([fnName, fn]) => {\n      console.log(`${fnName}: ${fn.toString()}`);\n    });\n  }\n\n  return apiFunctions;\n}\n\nexport { api };\n\nexport default api;\n","import {\n  makeGet,\n  makePost,\n  makePut,\n  makeDel,\n  createInstance,\n} from '@tutanck/axios';\nimport slashes from 'remove-trailing-slash';\n\nfunction getApiClient({ serverRootUrl, apiBaseUri, apiKey, decodeKey }) {\n  const baseURL = [slashes(serverRootUrl), apiBaseUri].join('');\n\n  const instance = createInstance({\n    baseURL,\n    headers: {\n      authorization: apiKey,\n    },\n  });\n\n  const get = makeGet(instance, {\n    encryption: { decodeKey },\n  });\n\n  const post = makePost(instance, {\n    encryption: { decodeKey },\n  });\n\n  const put = makePut(instance, {\n    encryption: { decodeKey },\n  });\n\n  const del = makeDel(instance, {\n    encryption: { decodeKey },\n  });\n\n  const apiClient = { get, post, put, del };\n\n  return apiClient;\n}\n\nexport { getApiClient };\n\nexport default getApiClient;\n","import getFunction from './functions';\nimport getNaming from './nomenclature';\n\nexport type Api = { [key: string]: Function };\n\nfunction getApiFunctions(\n  descriptor,\n  { get, post, put, del },\n  { debug = false },\n): Api {\n  const apiFunctions = Object.entries(descriptor).reduce(\n    (\n      acc,\n      [key, value]: [string, Array<{ uri: any; name: any; verb: any }>],\n    ) => {\n      const fnName = getNaming(key);\n\n      const [description] = value;\n\n      const fn = getFunction(\n        description,\n        { get, post, put, del },\n        { debug, fnName },\n      );\n\n      const cc = {\n        ...acc,\n        [fnName]: fn,\n      };\n\n      return cc;\n    },\n    {},\n  );\n\n  return apiFunctions;\n}\n\nexport { getApiFunctions };\n\nexport default getApiFunctions;\n","function getNaming(rawName) {\n  const Routine = 'Routine';\n  if (rawName.endsWith(Routine)) {\n    const radixLength = rawName.length - Routine.length;\n\n    const radix = rawName.substring(0, radixLength);\n\n    const count = 'count';\n    if (rawName.startsWith(count)) {\n      const modelName = radix.substring(count.length, rawName.length);\n\n      const fnName = `count${modelName}`;\n      return fnName;\n    }\n\n    const create = 'create';\n    if (rawName.startsWith(create)) {\n      const modelName = radix.substring(create.length, rawName.length);\n\n      const fnName = `create${modelName}`;\n      return fnName;\n    }\n\n    const findById = 'findById';\n    if (rawName.startsWith(findById)) {\n      const modelName = radix.substring(findById.length, rawName.length);\n\n      const fnName = `find${modelName}ById`;\n      return fnName;\n    }\n\n    const findByQuery = 'findByQuery';\n    if (rawName.startsWith(findByQuery)) {\n      const modelName = radix.substring(findByQuery.length, rawName.length);\n\n      const fnName = `find${modelName}ByQuery`;\n      return fnName;\n    }\n\n    const removeById = 'removeById';\n    if (rawName.startsWith(removeById)) {\n      const modelName = radix.substring(removeById.length, rawName.length);\n\n      const fnName = `remove${modelName}ByQuery`;\n      return fnName;\n    }\n\n    const removeByQuery = 'removeByQuery';\n    if (rawName.startsWith(removeByQuery)) {\n      const modelName = radix.substring(removeByQuery.length, rawName.length);\n\n      const fnName = `remove${modelName}ByQuery`;\n      return fnName;\n    }\n\n    const updateById = 'updateById';\n    if (rawName.startsWith(updateById)) {\n      const modelName = radix.substring(updateById.length, rawName.length);\n\n      const fnName = `update${modelName}ById`;\n      return fnName;\n    }\n\n    const updateByQuery = 'updateByQuery';\n    if (rawName.startsWith(updateByQuery)) {\n      const modelName = radix.substring(updateByQuery.length, rawName.length);\n\n      const fnName = `update${modelName}ByQuery`;\n      return fnName;\n    }\n  }\n\n  return rawName;\n}\n\nexport { getNaming };\n\nexport default getNaming;\n","import qs from 'qs';\n\nfunction getFunction(\n  { uri, name, verb },\n  { get, post, put, del },\n  { debug = false, fnName },\n) {\n  const call = {\n    PUT: put,\n    GET: get,\n    POST: post,\n    DELETE: del,\n  }[verb];\n\n  const Routine = 'Routine';\n  if (name.endsWith(Routine)) {\n    //\n\n    // count\n    const count = 'count';\n    if (name.startsWith(count)) {\n      const fn = async (filter: object): Promise<number> => {\n        const url = `${uri}?${qs.stringify({ filter })}`;\n\n        if (debug === true) {\n          console.log({ fnName, uri, name, verb });\n          console.log(`${verb} '${url}'`);\n        }\n\n        return call(url);\n      };\n\n      return fn;\n    }\n\n    // create\n    const create = 'create';\n    if (name.startsWith(create)) {\n      const fn = async (\n        docs: object | Array<object>,\n        options: object | undefined = {},\n      ): Promise<object | Array<object>> => {\n        const url = `${uri}?${qs.stringify({ options })}`;\n\n        const data = { data: { docs } };\n\n        if (debug === true) {\n          console.log({ fnName, uri, name, verb });\n          console.log(`${verb} '${url}' with data: ${JSON.stringify(data)}`);\n        }\n\n        return call(url, data);\n      };\n\n      return fn;\n    }\n\n    // findById\n    const findById = 'findById';\n    if (name.startsWith(findById)) {\n      const fn = async (\n        id: string,\n        projection: object | string | Array<string> | undefined = {},\n        options: object | undefined = {},\n      ): Promise<object> => {\n        const url = `${uri}${id}?${qs.stringify({ projection, options })}`;\n\n        if (debug === true) {\n          console.log({ fnName, uri, name, verb });\n          console.log(`${verb} '${url}'`);\n        }\n\n        return call(url);\n      };\n\n      return fn;\n    }\n\n    // findByQuery\n    const findByQuery = 'findByQuery';\n    if (name.startsWith(findByQuery)) {\n      const fn = async (\n        filter: object,\n        projection: object | string | Array<string> | undefined = {},\n        options: object | undefined = {},\n      ): Promise<Array<object>> => {\n        const url = `${uri}?${qs.stringify({ filter, projection, options })}`;\n\n        if (debug === true) {\n          console.log({ fnName, uri, name, verb });\n          console.log(`${verb} '${url}'`);\n        }\n\n        return call(url);\n      };\n\n      return fn;\n    }\n\n    // removeById\n    const removeById = 'removeById';\n    if (name.startsWith(removeById)) {\n      const fn = async (\n        id: string,\n        options: object | undefined = {},\n      ): Promise<object> => {\n        const url = `${uri}${id}?${qs.stringify({ options })}`;\n\n        if (debug === true) {\n          console.log({ fnName, uri, name, verb });\n          console.log(`${verb} '${url}'`);\n        }\n\n        return call(url);\n      };\n\n      return fn;\n    }\n\n    // removeByQuery\n    const removeByQuery = 'removeByQuery';\n    if (name.startsWith(removeByQuery)) {\n      const fn = async (\n        filter: object,\n        options: object | undefined = {},\n      ): Promise<any | object> => {\n        const url = `${uri}?${qs.stringify({ filter, options })}`;\n\n        if (debug === true) {\n          console.log({ fnName, uri, name, verb });\n          console.log(`${verb} '${url}'`);\n        }\n\n        return call(url);\n      };\n\n      return fn;\n    }\n\n    // updateById\n    const updateById = 'updateById';\n    if (name.startsWith(updateById)) {\n      const fn = async (\n        id: string,\n        update: object,\n        options: object | undefined = {},\n      ): Promise<object> => {\n        const url = `${uri}${id}?${qs.stringify({ options })}`;\n\n        const data = { data: { update } };\n\n        if (debug === true) {\n          console.log({ fnName, uri, name, verb });\n          console.log(`${verb} '${url}' with data: ${JSON.stringify(data)}`);\n        }\n\n        return call(url, data);\n      };\n\n      return fn;\n    }\n\n    // updateByQuery\n    const updateByQuery = 'updateByQuery';\n    if (name.startsWith(updateByQuery)) {\n      const fn = async (\n        filter: object,\n        update: object,\n        options: object | undefined = {},\n      ): Promise<any | object> => {\n        const url = `${uri}?${qs.stringify({ filter, options })}`;\n\n        const data = { data: { update } };\n\n        if (debug === true) {\n          console.log({ fnName, uri, name, verb });\n          console.log(`${verb} '${url}' with data: ${JSON.stringify(data)}`);\n        }\n\n        return call(url, data);\n      };\n\n      return fn;\n    }\n  }\n\n  // defaultFn\n  const defaultFn = async ({\n    body,\n    query,\n    params,\n  }: {\n    body: any;\n    query: any;\n    params: any;\n  }): Promise<any> => {\n    // TODO remove :params from the uri first to get a raw uri\n\n    const url = `${uri}?${qs.stringify({ query })}`;\n\n    const data = { data: body, params };\n\n    if (debug === true) {\n      console.log({ fnName, uri, name, verb });\n      console.log(`${verb} '${url}' with data: ${JSON.stringify(data)}`);\n    }\n\n    return call(url, data);\n  };\n\n  return defaultFn;\n}\n\nexport { getFunction };\n\nexport default getFunction;\n"],"names":["API_BASE_URI","CONF_ROUTE_URI","axiosInstance","axios","create","get","url","options","_extends","method","then","res","data","catch","err","async","connect","serverUrl","debug","console","log","descriptor","indexMap","_confRoute$methods","confRoute","find","route","path","Boolean","methods","includes","hasConf","Error","confUrl","slashes","conf","routing","apiMap","isArray","length","_","groupBy","error","protocol","host","parseUrl","serverRootUrl","apiBaseUri","serverConfig","api","apiKey","decodeKey","apiClient","baseURL","join","instance","createInstance","headers","authorization","makeGet","encryption","post","makePost","put","makePut","del","makeDel","getApiClient","apiFunctions","Object","entries","reduce","acc","key","value","fnName","rawName","endsWith","radix","substring","Routine","count","startsWith","findById","findByQuery","removeById","removeByQuery","updateById","updateByQuery","getNaming","description","fn","uri","name","verb","call","PUT","GET","POST","DELETE","qs","stringify","filter","docs","JSON","id","projection","update","body","query","params","getFunction","cc","getApiFunctions","map","toString"],"mappings":"6PAAaA,EAAe,OACfC,EAAiB,gOCC9B,MAAMC,EAAgBC,EAAMC,SAYfC,EAAMA,CAACC,EAAKC,IAErBL,EAAaM,GACXC,OAAQ,MACRH,OACGC,IAbJG,KAAMC,GACEA,EAAIC,MAEZC,MAAOC,IACN,MAAMA,ICFkBC,eAAAC,EAAQC,GAAWC,MAAEA,GAAQ,IAGzD,OAFc,IAAVA,GAAgBC,QAAQC,IAAI,cAAeH,SAElCZ,EAAIY,EAAW,CAAA,GACzBP,KAAKK,UACJ,IAAIM,EAEJ,ICbU,SAAQC,EAAW,IAAE,IAAAC,EACnC,MAAMC,EAAYF,EAASG,KAAMC,IAAe,MAALA,OAAK,EAALA,EAAOC,QAAS1B,GAM3D,OAJuB2B,QACZL,MAATC,GAAAD,OAASA,EAATC,EAAWK,cAAXN,EAAAA,EAAoBO,SHJS,OGQjC,CDKUC,CAAQT,SAsBK,IAAAU,MAAM,iCAAiCf,MArBtD,IACE,MAAMgB,EAAU,GAAGC,EAAQjB,KAAahB,KAE1B,IAAViB,GAAgBC,QAAQC,IAAI,cAAea,GAE/C,MAAME,QAAa9B,EAAI4B,EAAS,CAAE,IAE5BG,QAAEA,GAAYD,EAEdE,EAASD,EAAQpC,GAEvB,KAAMsC,EAAQD,IAAWA,EAAOE,OAAS,GACvC,MAAU,IAAAP,MAAM,4BAGlBX,EAAamB,EAAEC,QAAQJ,EAAQ,OACjC,CAAE,MAAOK,GAGP,MAFAvB,QAAQuB,MAAMA,GAER,IAAIV,MAAM,mCAAmCf,KACrD,CAGF,MAAM0B,SAAEA,EAAQC,KAAEA,GAASC,EAAS5B,GAUpC,MANqB,CACnBI,aACAyB,cAJoB,GAAGH,MAAaC,IAKpCG,WAAY/C,EAGPgD,GAERnC,MAAO6B,IAGN,MAFAvB,QAAQuB,MAAMA,GAER,IAAIV,MAAM,gCAAgCf,KAAY,EAElE,CE9CAF,eAAekC,EACbhC,GACAiC,OAAEA,EAAS,KAAIC,UAAEA,EAAY,KAAIjC,MAAEA,GAAQ,IAE3C,IAAKD,EACH,MAAU,IAAAe,MAAM,6CAGJ,IAAVd,GAAgBC,QAAQC,IAAI,CAAEH,YAAWiC,SAAQC,YAAWjC,UAEhE,MAAM8B,QAAqBhC,EAAQC,EAAW,CAC5CC,WAGIG,WAAEA,EAAUyB,cAAEA,EAAaC,WAAEA,GAAeC,EAE5CI,ECjBR,UAAsBN,cAAEA,EAAaC,WAAEA,EAAUG,OAAEA,EAAMC,UAAEA,IACzD,MAAME,EAAU,CAACnB,EAAQY,GAAgBC,GAAYO,KAAK,IAEpDC,EAAWC,EAAe,CAC9BH,UACAI,QAAS,CACPC,cAAeR,KAsBnB,MAFkB,CAAE7C,IAhBRsD,EAAQJ,EAAU,CAC5BK,WAAY,CAAET,eAeSU,KAZZC,EAASP,EAAU,CAC9BK,WAAY,CAAET,eAWeY,IARnBC,EAAQT,EAAU,CAC5BK,WAAY,CAAET,eAOoBc,IAJxBC,EAAQX,EAAU,CAC5BK,WAAY,CAAET,eAMlB,CDZoBgB,CAAa,CAC7BrB,gBACAC,aACAI,YACAD,YAGI7C,IAAEA,EAAGwD,KAAEA,EAAIE,IAAEA,EAAGE,IAAEA,GAAQb,EAE1BgB,EE9BR,SACE/C,GACAhB,IAAEA,EAAGwD,KAAEA,EAAIE,IAAEA,EAAGE,IAAEA,IAClB/C,MAAEA,GAAQ,IAEV,MAAMkD,EAAeC,OAAOC,QAAQjD,GAAYkD,OAC9C,CACEC,GACCC,EAAKC,MAEN,MAAMC,ECfZ,SAAmBC,GAEjB,GAAIA,EAAQC,SADI,WACe,CAC7B,MAEMC,EAAQF,EAAQG,UAAU,EAFZH,EAAQrC,OAASyC,GAI/BC,EAAQ,QACd,GAAIL,EAAQM,WAAWD,GAIrB,MADe,QAFGH,EAAMC,UAAUE,EAAM1C,OAAQqC,EAAQrC,UAM1D,MAAMnC,EAAS,SACf,GAAIwE,EAAQM,WAAW9E,GAIrB,MADe,SAFG0E,EAAMC,UAAU3E,EAAOmC,OAAQqC,EAAQrC,UAM3D,MAAM4C,EAAW,WACjB,GAAIP,EAAQM,WAAWC,GAIrB,MADe,OAFGL,EAAMC,UAAUI,EAAS5C,OAAQqC,EAAQrC,cAM7D,MAAM6C,EAAc,cACpB,GAAIR,EAAQM,WAAWE,GAIrB,MADe,OAFGN,EAAMC,UAAUK,EAAY7C,OAAQqC,EAAQrC,iBAMhE,MAAM8C,EAAa,aACnB,GAAIT,EAAQM,WAAWG,GAIrB,MADe,SAFGP,EAAMC,UAAUM,EAAW9C,OAAQqC,EAAQrC,iBAM/D,MAAM+C,EAAgB,gBACtB,GAAIV,EAAQM,WAAWI,GAIrB,MADe,SAFGR,EAAMC,UAAUO,EAAc/C,OAAQqC,EAAQrC,iBAMlE,MAAMgD,EAAa,aACnB,GAAIX,EAAQM,WAAWK,GAIrB,MADe,SAFGT,EAAMC,UAAUQ,EAAWhD,OAAQqC,EAAQrC,cAM/D,MAAMiD,EAAgB,gBACtB,GAAIZ,EAAQM,WAAWM,GAIrB,MADe,SAFGV,EAAMC,UAAUS,EAAcjD,OAAQqC,EAAQrC,gBAKpE,CAEA,OAAOqC,CACT,CD1DqBa,CAAUhB,IAElBiB,GAAehB,EAEhBiB,EEjBZ,UACEC,IAAEA,EAAGC,KAAEA,EAAIC,KAAEA,IACbzF,IAAEA,EAAGwD,KAAEA,EAAIE,IAAEA,EAAGE,IAAEA,IAClB/C,MAAEA,GAAQ,EAAKyD,OAAEA,IAEjB,MAAMoB,EAAO,CACXC,IAAKjC,EACLkC,IAAK5F,EACL6F,KAAMrC,EACNsC,OAAQlC,GACR6B,GAGF,GAAID,EAAKhB,SADO,WACY,CAK1B,GAAIgB,EAAKX,WADK,SAaZ,OAXWnE,UACT,MAAMT,EAAM,GAAGsF,KAAOQ,EAAGC,UAAU,CAAEC,aAOrC,OALc,IAAVpF,IACFC,QAAQC,IAAI,CAAEuD,SAAQiB,MAAKC,OAAMC,SACjC3E,QAAQC,IAAI,GAAG0E,MAASxF,OAGnByF,EAAKzF,EAAG,EAQnB,GAAIuF,EAAKX,WADM,UAkBb,OAhBWnE,MACTwF,EACAhG,EAA8B,CAAA,KAE9B,MAAMD,EAAM,GAAGsF,KAAOQ,EAAGC,UAAU,CAAE9F,cAE/BK,EAAO,CAAEA,KAAM,CAAE2F,SAOvB,OALc,IAAVrF,IACFC,QAAQC,IAAI,CAAEuD,SAAQiB,MAAKC,OAAMC,SACjC3E,QAAQC,IAAI,GAAG0E,MAASxF,iBAAmBkG,KAAKH,UAAUzF,OAGrDmF,EAAKzF,EAAKM,EAAI,EAQzB,GAAIiF,EAAKX,WADQ,YAiBf,OAfWnE,MACT0F,EACAC,EAA0D,CAAA,EAC1DnG,EAA8B,CAAA,KAE9B,MAAMD,EAAM,GAAGsF,IAAMa,KAAML,EAAGC,UAAU,CAAEK,aAAYnG,cAOtD,OALc,IAAVW,IACFC,QAAQC,IAAI,CAAEuD,SAAQiB,MAAKC,OAAMC,SACjC3E,QAAQC,IAAI,GAAG0E,MAASxF,OAGnByF,EAAKzF,EAAG,EAQnB,GAAIuF,EAAKX,WADW,eAiBlB,OAfWnE,MACTuF,EACAI,EAA0D,CAAA,EAC1DnG,EAA8B,CAAA,KAE9B,MAAMD,EAAM,GAAGsF,KAAOQ,EAAGC,UAAU,CAAEC,SAAQI,aAAYnG,cAOzD,OALc,IAAVW,IACFC,QAAQC,IAAI,CAAEuD,SAAQiB,MAAKC,OAAMC,SACjC3E,QAAQC,IAAI,GAAG0E,MAASxF,OAGnByF,EAAKzF,EAAG,EAQnB,GAAIuF,EAAKX,WADU,cAgBjB,OAdWnE,MACT0F,EACAlG,EAA8B,CAAA,KAE9B,MAAMD,EAAM,GAAGsF,IAAMa,KAAML,EAAGC,UAAU,CAAE9F,cAO1C,OALc,IAAVW,IACFC,QAAQC,IAAI,CAAEuD,SAAQiB,MAAKC,OAAMC,SACjC3E,QAAQC,IAAI,GAAG0E,MAASxF,OAGnByF,EAAKzF,EAAG,EAQnB,GAAIuF,EAAKX,WADa,iBAgBpB,OAdWnE,MACTuF,EACA/F,EAA8B,CAAA,KAE9B,MAAMD,EAAM,GAAGsF,KAAOQ,EAAGC,UAAU,CAAEC,SAAQ/F,cAO7C,OALc,IAAVW,IACFC,QAAQC,IAAI,CAAEuD,SAAQiB,MAAKC,OAAMC,SACjC3E,QAAQC,IAAI,GAAG0E,MAASxF,OAGnByF,EAAKzF,EAAG,EAQnB,GAAIuF,EAAKX,WADU,cAmBjB,OAjBWnE,MACT0F,EACAE,EACApG,EAA8B,MAE9B,MAAMD,EAAM,GAAGsF,IAAMa,KAAML,EAAGC,UAAU,CAAE9F,cAEpCK,EAAO,CAAEA,KAAM,CAAE+F,WAOvB,OALc,IAAVzF,IACFC,QAAQC,IAAI,CAAEuD,SAAQiB,MAAKC,OAAMC,SACjC3E,QAAQC,IAAI,GAAG0E,MAASxF,iBAAmBkG,KAAKH,UAAUzF,OAGrDmF,EAAKzF,EAAKM,EAAI,EAQzB,GAAIiF,EAAKX,WADa,iBAmBpB,OAjBWnE,MACTuF,EACAK,EACApG,EAA8B,CAAA,KAE9B,MAAMD,EAAM,GAAGsF,KAAOQ,EAAGC,UAAU,CAAEC,SAAQ/F,cAEvCK,EAAO,CAAEA,KAAM,CAAE+F,WAOvB,OALc,IAAVzF,IACFC,QAAQC,IAAI,CAAEuD,SAAQiB,MAAKC,OAAMC,SACjC3E,QAAQC,IAAI,GAAG0E,MAASxF,iBAAmBkG,KAAKH,UAAUzF,OAGrDmF,EAAKzF,EAAKM,EAAI,CAK3B,CA0BA,OAvBkBG,OAChB6F,OACAC,QACAC,aAQA,MAAMxG,EAAM,GAAGsF,KAAOQ,EAAGC,UAAU,CAAEQ,YAE/BjG,EAAO,CAAEA,KAAMgG,EAAME,UAO3B,OALc,IAAV5F,IACFC,QAAQC,IAAI,CAAEuD,SAAQiB,MAAKC,OAAMC,SACjC3E,QAAQC,IAAI,GAAG0E,MAASxF,iBAAmBkG,KAAKH,UAAUzF,OAGrDmF,EAAKzF,EAAKM,EAAI,CAIzB,CFhMiBmG,CACTrB,EACA,CAAErF,MAAKwD,OAAME,MAAKE,OAClB,CAAE/C,QAAOyD,WAQX,OALQnE,EAAA,CAAA,EACHgE,EAAG,CACNG,CAACA,GAASgB,GAGLqB,EAET,CAAE,GAGJ,OAAO5C,CACT,CFDuB6C,CACnB5F,EACA,CAAEhB,MAAKwD,OAAME,MAAKE,OAClB,CAAE/C,UASJ,OANc,IAAVA,GACFmD,OAAOC,QAAQF,GAAc8C,IAAI,EAAEvC,EAAQgB,MACzCxE,QAAQC,IAAI,GAAGuD,MAAWgB,EAAGwB,aAAY,GAItC/C,CACT"}